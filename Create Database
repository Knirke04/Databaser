USE unord;

DROP TABLE IF EXISTS UnordEmployees;

CREATE TABLE UnordEmployees(
   UnordID INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
   Cpr INT NOT NULL,
   FirstName VARCHAR(20) NOT NULL,
   MiddleName VARCHAR(40),
   LastName VARCHAR(30) NOT NULL,
   RoadName VARCHAR(40) NOT NULL,
   RoadNumber INT NOT NULL,
   RoadLetter VARCHAR(1),
   RoadFloor VARCHAR(2),
   RoadFloorLR VARCHAR(2),
   FK_PostalCode INT NOT NULL,
   Mobile INT NOT NULL,
   EmailWork VARCHAR(50) NOT NULL UNIQUE, 
   PasswordWork VARCHAR(64) NOT NULL
);

--Her indsætter jeg 4 fiktive personer for at have noget at arbejde med i opgaven. 
--IRL vil informationen om medarbejdere trækkes fra skolens allerede eksisterende database med tabel indeholdende alle medarbejdere. 

INSERT UnordEmployees (Cpr, FirstName, MiddleName, LastName, RoadName, RoadNumber, RoadLetter, RoadFloor, RoadFloorLR, FK_PostalCode, Mobile, EmailWork, PasswordWork)
VALUES (1705752348, 'Tania', 'Linn Ottesen', 'Nielsen', 'Rosengårdsvej', 9, NULL, NULL, NULL, 3630, 22679972, 'tani@unord.dk', 'HikkeDrikke26'),
(1208712349, 'Morten', NULL, 'Hansen', 'Vibevej', 5, 'A', NULL, NULL, 3630, 23561212, 'moha@unord.dk', 'HikkeDrikke25'),
(1304804769, 'Mikkel', NULL, 'Hansen', 'Ødegårdvej', 11, NULL, NULL, NULL, 3600, 77991212, 'miha@unord.dk', 'HikkeDrikke21'),
(0303791414, 'Janne', 'Walmod', 'Hansen', 'Mågegade', 27, 'C', NULL, NULL, 4050, 55876633, 'jaan@unord.dk', 'HikkeDrikke22');

SELECT * FROM UnordEmployees;
--Dette er bare en test SELECT for at se om INSERT virker. Derfor bruges * selvom det ikke er best practice!

-------------------------------------------------------------


DROP TABLE IF EXISTS UnordCity;

CREATE TABLE UnordCity(
    PostalCode INT NOT NULL PRIMARY KEY,
    City VARCHAR(30) NOT NULL
);

INSERT UnordCity (PostalCode, City)
VALUES (3600, 'Frederikssund'),
(3630, 'Jægerspris'),
(4050, 'Skibby');

SELECT * FROM UnordCity;
--Dette er bare en test SELECT for at se om INSERT virker. Derfor bruges * selvom det ikke er best practice!

-------------------------------------------------------------


DROP TABLE IF EXISTS UnordCoronaTest;

CREATE TABLE UnordCoronaTest(
    TestID INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
    TestFileName VARCHAR(30) NOT NULL,
    TestTimeStamp DATETIME DEFAULT(GETDATE()) NOT NULL,
    FK_UnordID INT NOT NULL, 
    TestConsent BIT NOT NULL, 
    TestDate DATE NOT NULL, 
    TestTime TIME NOT NULL
);

--Her indsætter jeg 10 fiktive testsvar, så jeg har noget at arbejde med i opgaven. 
INSERT UnordCoronaTest (TestFileName, TestTimeStamp, FK_UnordID, TestConsent, TestDate, TestTime)
VALUES ('Testsvar.jpg', GETDATE(), 1, 1, '2021-03-08', '13:00'),
('Testsvar2.jpg', GETDATE(), 2, 1, '2021-03-02', '13:55'),
('Testsvar3.jpg', GETDATE(), 3, 1, '2021-01-08', '08:02'),
('Testsvar4.jpg', GETDATE(), 4, 1, '2021-02-18', '16:24'),
('Testsvar5.jpg', GETDATE(), 1, 1, '2021-01-08', '19:40'),
('Testsvar6.jpg', GETDATE(), 2, 1, '2021-04-02', '12:30'),
('Testsvar7.jpg', GETDATE(), 1, 1, '2021-03-15', '18:06'),
('Testsvar8.jpg', GETDATE(), 3, 1, '2021-02-28', '13:22'),
('Testsvar9.jpg', GETDATE(), 4, 1, '2021-01-04', '15:44'),
('Testsvar10.jpg', GETDATE(), 1, 1, '2021-02-28', '09:18');


-- Dette er et eksempel på hvordan koden vil se ud, når en medarbejders uploadede testsvar skal gemmes i databasen. 
IF EXISTS (
SELECT *
    FROM INFORMATION_SCHEMA.ROUTINES
WHERE SPECIFIC_SCHEMA = N'dbo'
    AND SPECIFIC_NAME = N'stp_InsertCoronaTestAnswer'
    AND ROUTINE_TYPE = N'PROCEDURE'
)
DROP PROCEDURE dbo.stp_InsertCoronaTestAnswer
GO

CREATE PROCEDURE dbo.stp_InsertCoronaTestAnswer
    @TestFileName AS VARCHAR = 'Testsvar44.jpg',
    @UnordID AS INT = 4,
    @TestDate AS DATE = '2021-04-10',
    @TestTime AS TIME = '13:10'
AS
BEGIN
    INSERT UnordCoronaTest (TestFileName, TestTimeStamp, FK_UnordID, TestConsent, TestDate, TestTime)
    VALUES (@TestFileName, GETDATE(), @UnordID, 1, @TestDate, @TestTime);       
END
GO

EXECUTE dbo.stp_InsertCoronaTestAnswer
GO


------------------------------------------------------------------------
    
    --Dette er et eksempel på udtræk fra databasen, hvor alle 3 tabeller joines og information hentes ud om de testsvar, der ligger i tabellen. 
    IF EXISTS (
    SELECT *
        FROM INFORMATION_SCHEMA.ROUTINES
    WHERE SPECIFIC_SCHEMA = N'dbo'
        AND SPECIFIC_NAME = N'stp_GetAllCoronaTestAnswers'
        AND ROUTINE_TYPE = N'PROCEDURE'
    )
    DROP PROCEDURE dbo.stp_GetAllCoronaTestAnswers
    GO
    
    CREATE PROCEDURE dbo.stp_GetAllCoronaTestAnswers
    AS
    BEGIN
       SELECT TestDate, TestTime, FirstName, MiddleName, LastName, City, TestFileName 
       FROM UnordCoronaTest 
       INNER JOIN UnordEmployees ON UnordCoronaTest.FK_UnordID = UnordEmployees.UnordID
       INNER JOIN UnordCity ON UnordCity.PostalCode = UnordEmployees.FK_PostalCode 
       ORDER BY TestDate, TestTime;
    END
    GO
    -- Først hentes alle testsvar ud. 
    EXECUTE dbo.stp_GetAllCoronaTestAnswers
    GO

   ------------------------------------------------------------------------

   
   --Dette er koden til at slette testsvar fra databasen, når de er 30 dage gamle. 
   IF EXISTS (
   SELECT *
       FROM INFORMATION_SCHEMA.ROUTINES
   WHERE SPECIFIC_SCHEMA = N'dbo'
       AND SPECIFIC_NAME = N'stp_DeleteCoronaTests'
       AND ROUTINE_TYPE = N'PROCEDURE'
   )
   DROP PROCEDURE dbo.stp_DeleteCoronaTests
   GO
  
   CREATE PROCEDURE dbo.stp_DeleteCoronaTests
   AS
   BEGIN
        
      DELETE FROM UnordCoronaTest WHERE TestDate <= DATEADD(day,-30, GETDATE());
   END
   GO
  
   EXECUTE dbo.stp_DeleteCoronaTests
   GO

   --------------------------------------------------------------------------------

    --Her benyttes STP til igen at hente information om testsvar fra tabellen. Nu efter de gamle testsvar er blevet slettet. 
    EXECUTE dbo.stp_GetAllCoronaTestAnswers 
    GO
 